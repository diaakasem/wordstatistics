// Generated by CoffeeScript 1.7.1
(function() {
  var controller;

  controller = function(scope, ParseCrud, ngTableParams, http, Alert) {
    var Documents, Processes, WordsLists;
    scope.data = [];
    scope.visualizeText = 'Visualize';
    scope.visualization = false;
    scope.selected = 'visual';
    Documents = new ParseCrud('Documents');
    Documents.list(function(d) {
      return scope.documents = d;
    });
    WordsLists = new ParseCrud('WordsLists');
    WordsLists.list(function(d) {
      return scope.wordslists = d;
    });
    Processes = new ParseCrud('Processes');
    Processes.listWith(['wordslist', 'documents'], function(d) {
      scope.data = d;
      return scope.tableParams.reload();
    });
    scope.visualize = function(wordslist) {
      if (scope.visualization === true) {
        scope.visualizeText = 'Visualize';
        d3.select("svg").remove();
        scope.visualization = !scope.visualization;
        return;
      }
      return wordslist.get('uploadedDocument').fetch({
        success: function(documentFile) {
          var h, name, params, uploadname;
          uploadname = documentFile.get('uploadname');
          name = wordslist.get('name');
          params = {
            method: 'Get',
            url: '/visualize-wordslist?name=' + name + '&uploadname=' + uploadname
          };
          h = http(params);
          h.success(function(d) {
            var click, collapse, diagonal, duration, height, i, margin, root, svg, tree, update, width;
            console.log(d);
            scope.visualizeText = 'Close';
            scope.visualization = !scope.visualization;
            margin = {
              top: 20,
              right: 20,
              bottom: 20,
              left: 120
            };
            width = 1060 - margin.right - margin.left;
            height = 800 - margin.top - margin.bottom;
            i = 0;
            duration = 750;
            tree = d3.layout.tree().size([height, width]);
            diagonal = d3.svg.diagonal().projection(function(d) {
              return [d.y, d.x];
            });
            svg = d3.select(".visualize").append("svg").attr("width", width + margin.right + margin.left).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            d3.select(self.frameElement).style("height", "800px");
            collapse = function(d) {
              if (d.children) {
                d._children = d.children;
                d._children.forEach(collapse);
                return d.children = null;
              }
            };
            update = function(source) {
              var link, links, node, nodeEnter, nodeExit, nodeUpdate, nodes;
              nodes = tree.nodes(root).reverse();
              links = tree.links(nodes);
              nodes.forEach(function(d) {
                return d.y = d.depth * 120;
              });
              node = svg.selectAll("g.node").data(nodes, function(d) {
                return d.id || (d.id = ++i);
              });
              nodeEnter = node.enter().append("g").attr("class", "node").attr("transform", function(d) {
                return "translate(" + source.y0 + "," + source.x0 + ")";
              }).on("click", click);
              nodeEnter.append("circle").attr("r", 1e-6).style("fill", function(d) {
                if (d._children) {
                  return "lightsteelblue";
                } else {
                  return "#fff";
                }
              });
              nodeEnter.append("text").attr("x", function(d) {
                if (d.children || d._children) {
                  return -10;
                } else {
                  return 10;
                }
              }).attr("dy", ".35em").attr("text-anchor", function(d) {
                if (d.children || d._children) {
                  return "end";
                } else {
                  return "start";
                }
              }).text(function(d) {
                return d.name;
              }).style("fill-opacity", 1e-6);
              nodeUpdate = node.transition().duration(duration).attr("transform", function(d) {
                return "translate(" + d.y + "," + d.x + ")";
              });
              nodeUpdate.select("circle").attr("r", 4.5).style("fill", function(d) {
                if (d._children) {
                  return "lightsteelblue";
                } else {
                  return "#fff";
                }
              });
              nodeUpdate.select("text").style("fill-opacity", 1);
              nodeExit = node.exit().transition().duration(duration).attr("transform", function(d) {
                return "translate(" + source.y + "," + source.x + ")";
              }).remove();
              nodeExit.select("circle").attr("r", 1e-6);
              nodeExit.select("text").style("fill-opacity", 1e-6);
              link = svg.selectAll("path.link").data(links, function(d) {
                return d.target.id;
              });
              link.enter().insert("path", "g").attr("class", "link").attr("d", function(d) {
                var o;
                o = {
                  x: source.x0,
                  y: source.y0
                };
                return diagonal({
                  source: o,
                  target: o
                });
              });
              link.transition().duration(duration).attr("d", diagonal);
              link.exit().transition().duration(duration).attr("d", function(d) {
                var o;
                o = {
                  x: source.x,
                  y: source.y
                };
                return diagonal({
                  source: o,
                  target: o
                });
              }).remove();
              return nodes.forEach(function(d) {
                d.x0 = d.x;
                return d.y0 = d.y;
              });
            };
            click = function(d) {
              if (d.children) {
                d._children = d.children;
                d.children = null;
              } else {
                d.children = d._children;
                d._children = null;
              }
              return update(d);
            };
            root = d;
            root.x0 = height / 2;
            root.y0 = 0;
            root.children.forEach(collapse);
            return update(root);
          });
          return h.error(function(e) {
            return console.log(e);
          });
        }
      });
    };
    return scope.tableParams = new ngTableParams({
      page: 1,
      count: 10
    }, {
      total: function() {
        return scope.data.length;
      },
      getData: function($defer, params) {
        return $defer.resolve(scope.data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
      }
    });
  };

  angular.module('wordsApp').controller('MainCtrl', ['$scope', 'ParseCrud', 'ngTableParams', '$http', 'Alert', controller]);

}).call(this);
