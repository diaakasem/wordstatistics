// Generated by CoffeeScript 1.7.1
(function() {
  var controller;

  controller = function(scope, params, ParseCrud, timeout, http, location, Alert) {
    var Processes, id;
    id = params.id;
    scope.id = params.id;
    scope.text = '';
    scope.entity = {};
    scope.selected = 'visual';
    Processes = new ParseCrud('Processes');
    Processes.getWith(params.id, ['wordslist', 'documents'], function(d) {
      return scope.$apply(function() {
        var data, key, _i, _len, _ref, _results;
        scope.entity = d;
        console.log(d);
        _ref = Object.keys(scope.entity.get('result'));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          data = scope.entity.get('result')[key].categories;
          _results.push(scope.graph(data));
        }
        return _results;
      });
    });
    scope.remove = function(entity) {
      return entity.destroy({
        success: function() {
          return scope.$apply(function() {
            Alert.success('Removed successfully.');
            return location.path('/processes');
          });
        },
        error: function(e) {
          return scope.$apply(function() {
            console.log(e);
            return Alert.error('Error occurred while removing.');
          });
        }
      });
    };
    scope.save = function(entity) {
      var category, data, entry, file, hiddenElement, i, result, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      console.log(entity.get('result'));
      result = entity.attributes.result;
      data = "Filename,";
      i = 1;
      _ref = Object.keys(entity.attributes.result);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        entry = result[file].categories;
        if (i === 1) {
          _ref1 = Object.keys(entry);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            category = _ref1[_j];
            data += entry[category].name + ",";
          }
          data += "\n";
        }
        data += file + ",";
        _ref2 = Object.keys(entry);
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          category = _ref2[_k];
          data += entry[category].freq + ",";
        }
        data += "\n";
        i++;
      }
      console.log(data);
      hiddenElement = document.createElement('a');
      hiddenElement.href = 'data:attachment/csv,' + encodeURI(data);
      hiddenElement.target = '_blank';
      hiddenElement.download = 'analyzeresult_' + Date.now() + '.csv';
      return hiddenElement.click();
    };
    return scope.graph = function(data) {
      var formatPercent, height, margin, svg, tip, width, x, xAxis, y, yAxis;
      margin = {
        top: 40,
        right: 20,
        bottom: 80,
        left: 80
      };
      width = 960 - margin.left - margin.right;
      height = 550 - margin.top - margin.bottom;
      formatPercent = d3.format("03d");
      x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left").ticks(10);
      tip = d3.tip().attr("class", "d3-tip").offset([-10, 0]).html(function(d) {
        return "<strong>Frequency:</strong> <span style='color:red'>" + d.frequency + "</span>";
      });
      svg = d3.select("#chart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      svg.call(tip);
      data = _.map(data, function(d) {
        return {
          word: d.name,
          frequency: d.freq
        };
      });
      x.domain(data.map(function(d) {
        return d.word;
      }));
      y.domain([
        0, d3.max(data, function(d) {
          return d.frequency;
        })
      ]);
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis).selectAll("text").style("text-anchor", "end").attr("transform", function(d) {
        return "rotate(-65)";
      });
      svg.append("g").attr("class", "y axis").call(yAxis);
      return svg.selectAll(".bar").data(data).enter().append("rect").attr("class", "bar").attr("x", function(d) {
        return x(d.word);
      }).attr("width", x.rangeBand()).attr("y", function(d) {
        return y(d.frequency);
      }).attr("height", function(d) {
        return height - y(d.frequency);
      }).on("mouseover", tip.show).on("mouseout", tip.hide);
    };
  };

  angular.module('wordsApp').controller('ProcessedDocumentCtrl', ['$scope', '$routeParams', 'ParseCrud', '$timeout', '$http', '$location', 'Alert', controller]);

}).call(this);
