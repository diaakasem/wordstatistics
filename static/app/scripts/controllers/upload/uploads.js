// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var controller;

  controller = function(scope, ParseCrud, http, ngTableParams, Alert) {
    var DocumentUpload, Documents, FilesUpload, documentSaveSuccess, removeFile, saveError, saveSuccess, uploader;
    scope.text = '';
    scope.filesUploaded = [];
    scope.entity = {};
    scope.data = [];
    scope.selected = 'upload';
    Documents = new ParseCrud('Documents');
    DocumentUpload = new ParseCrud('DocumentUpload');
    FilesUpload = new ParseCrud('FilesUpload');
    DocumentUpload.list(function(d) {
      scope.data = d;
      scope.tableParams.reload();
      return console.log(d);
    });
    removeFile = function(name) {
      var h, params;
      params = {
        method: 'POST',
        url: '/removeupload',
        data: {
          filename: name
        }
      };
      h = http(params);
      h.success(function(d) {
        return Alert.success('Removed successfully.');
      });
      return h.error(function(e) {
        console.log(e);
        return Alert.error("Error removing uploaded file.");
      });
    };
    scope.remove = function(e) {
      var filename, query, removeSuccess;
      if (!scope.hasWriteAccess(e)) {
        return;
      }
      filename = e.get('uploadname');
      removeSuccess = function(e) {
        var query;
        DocumentUpload.list(function(d) {
          scope.data = d;
          return scope.tableParams.reload();
        });
        if (!scope.$root.isAdmin) {
          query = new Parse.Query('Documents');
          query.equalTo('name', e.get('name'));
          return query.first({
            success: function(associatedDoc) {
              return Documents.remove(associatedDoc, function(result) {
                return console.log(result);
              });
            }
          });
        }
      };
      if (filename) {
        removeFile(filename);
      } else {
        query = new Parse.Query('FilesUpload');
        query.equalTo('parent', e);
        query.find({
          success: function(files) {
            return files.forEach(function(file, i) {
              filename = file.get('uploadname');
              console.log(filename);
              removeFile(filename);
              return file.destroy();
            });
          }
        });
      }
      return DocumentUpload.remove(e, removeSuccess);
    };
    scope.tableParams = new ngTableParams({
      page: 1,
      count: 10
    }, {
      total: function() {
        return scope.data.length;
      },
      getData: function($defer, params) {
        var end, start;
        start = (params.page() - 1) * params.count();
        end = params.page() * params.count();
        return $defer.resolve(scope.data.slice(start, end));
      }
    });
    uploader = new plupload.Uploader({
      browse_button: "browse",
      url: "/upload",
      filters: {
        mime_types: [
          {
            title: "Text files",
            extensions: "txt"
          }, {
            title: "Doc files",
            extensions: "doc,docx"
          }
        ],
        max_file_size: "50mb"
      }
    });
    uploader.init();
    scope.filesAdded = [];
    uploader.bind("FilesAdded", function(up, files) {
      return scope.$apply(function() {
        return plupload.each(files, function(file) {
          return scope.filesAdded.push(file);
        });
      });
    });
    scope.hasWriteAccess = function(obj) {
      var acl;
      if (!obj) {
        return false;
      }
      acl = obj.getACL();
      return acl.getWriteAccess(scope.$root.user);
    };
    documentSaveSuccess = function(e) {
      return function(doc) {
        return scope.$apply(function() {
          scope.selected = 'uploaded';
          return Alert.success("File was uploaded successfully. &nbsp;&nbsp; <a href='#upload'>Upload more documents</a> | <a href='#/processes'>Run analyses</a>");
        });
      };
    };
    saveSuccess = function(e) {
      if (!scope.$root.isAdmin) {
        Documents.save({
          name: e.get('name'),
          uploadedDocument: e
        }, documentSaveSuccess(e), saveError);
      } else {
        scope.$apply(function() {
          scope.selected = 'uploaded';
          return Alert.success("File was uploaded successfully. &nbsp;&nbsp; <a href='#upload'>Upload more documents</a> | <a href='#/processes'>Run analyses</a>");
        });
      }
      return DocumentUpload.list(function(d) {
        scope.data = d;
        return scope.tableParams.reload();
      });
    };
    saveError = function(e) {
      return scope.$apply(function() {
        console.log(e);
        return Alert.error("Error occured while saving upload info.");
      });
    };
    uploader.bind('FileUploaded', function(up, file, xhr) {
      var res;
      res = JSON.parse(xhr.response);
      return scope.filesUploaded.push(res.result);
    });
    uploader.bind('UploadComplete', function(up, files) {
      var Document, File, document, filesArray, files_obj;
      files_obj = [];
      files.forEach(function(file, i) {
        var obj;
        obj = {
          filename: file.name,
          uploadname: scope.filesUploaded[i]
        };
        return files_obj.push(obj);
      });
      if (files_obj.length === 1) {
        files_obj[0].name = scope.name;
        DocumentUpload.save(files_obj[0], saveSuccess, saveError);
      } else {
        Document = Parse.Object.extend('DocumentUpload');
        document = new Document();
        document.set('name', scope.name);
        document.set('filename', '<multiple files...>');
        document.setACL(new Parse.ACL(Parse.User.current()));
        File = Parse.Object.extend('FilesUpload');
        filesArray = [];
        files_obj.forEach(function(obj, i) {
          var file;
          file = new File();
          file.set('filename', obj.filename);
          file.set('uploadname', obj.uploadname);
          file.set('parent', document);
          file.setACL(new Parse.ACL(Parse.User.current()));
          return filesArray.push(file);
        });
        Parse.Object.saveAll(filesArray, {
          success: function(objs) {
            return saveSuccess(document);
          },
          error: function(error) {
            return console.log(error);
          }
        });
      }
      uploader.splice();
      return scope.$apply(function() {
        scope.filesAdded.length = 0;
        scope.name = '';
        scope.filesToUpload = [];
        scope.filesUploaded = [];
        return files = [];
      });
    });
    uploader.bind('UploadProgress', function(up, file) {
      return scope.$apply(function() {
        var matches;
        matches = _.filter(scope.filesAdded, function(f) {
          return f.id === file.id;
        });
        return matches[0].percent = file.percent;
      });
    });
    uploader.bind('Error', function(up, err) {
      return scope.$apply(function() {
        console.log(err);
        return Alert.error("Error uploading the file.");
      });
    });
    return scope.upload = function() {
      Alert.clear();
      return uploader.start();
    };
  };

  angular.module('wordsApp').controller('UploadsUploadsCtrl', ['$scope', 'ParseCrud', '$http', 'ngTableParams', 'Alert', controller]);

}).call(this);
